{"version":3,"sources":["components/LikeButton.jsx","components/Card.jsx","components/LoadingScreen.jsx","components/DateSelectMenu.jsx","components/NavBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["LikeButton","useState","clickedLike","setClickedLike","icon","className","backgroundColour","onClick","style","backgroundColor","Card","props","imageElement","title","mediaType","imageUrl","date","description","src","alt","height","width","controls","LoadingScreen","display","DateSelectMenu","dateSelection","values","htmlFor","name","id","onChange","event","target","value","NavBar","href","App","imageCards","loadingScreenDisplay","todayDate","Date","toISOString","slice","startingDate","setDate","getDate","apiUrl","isLoading","setIsLoading","jsonData","setJsonData","fetchApi","this_startDate","fetch","then","response","ok","Error","json","data","reverse","catch","error","console","useEffect","arrayToLoop","info","item","push","media_type","url","explanation","createCards","Fragment","dateValue","newStartDate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02857791.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./LikeButton.css\";\r\nfunction LikeButton() {\r\n  const [clickedLike, setClickedLike] = useState(false);\r\n\r\n  let icon = clickedLike ? (\r\n    <i className=\"fas fa-heart heart-animation\"></i>\r\n  ) : (\r\n    \"Like\"\r\n  );\r\n  let backgroundColour = clickedLike ? \"red\" : \"white\";\r\n  return (\r\n    <button\r\n      className=\"my-like-button\"\r\n      onClick={handleClick}\r\n      style={{ backgroundColor: backgroundColour }}\r\n    >\r\n      {icon}\r\n    </button>\r\n  );\r\n\r\n  function handleClick() {\r\n    setClickedLike(!clickedLike);\r\n  }\r\n}\r\n\r\nexport default LikeButton;\r\n","import React from \"react\";\r\nimport LikeButton from \"./LikeButton\";\r\nfunction Card(props) {\r\n  const { title, mediaType, imageUrl, date, description } = props;\r\n  let imageElement;\r\n  if (mediaType === \"image\") {\r\n    imageElement = (\r\n      <img\r\n        src={imageUrl}\r\n        alt=\"an picture taken by NASA of space\"\r\n        className=\"card-img-top\"\r\n      />\r\n    );\r\n  } else {\r\n    imageElement = (\r\n      <iframe\r\n        title={\"youtube video of \" + title}\r\n        style={{ height: \"20em\", width: \"auto\" }}\r\n        controls\r\n        src={imageUrl}\r\n        alt=\"an picture taken by NASA of space\"\r\n        className=\"card-img-top\"\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"card pb-2 shadow-sm\">\r\n      {/* <img\r\n        src={imageUrl}\r\n        alt=\"an picture taken by NASA of space\"\r\n        className=\"card-img-top\"\r\n      /> */}\r\n      {imageElement}\r\n      <div className=\"card-body\">\r\n        <h2 className=\"card-title\">{title}</h2>\r\n        <p>{date}</p>\r\n        <p className=\"card-text\">{description}</p>\r\n        <LikeButton />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./LoadingScreen.css\";\r\nfunction LoadingScreen(props) {\r\n  const { display } = props;\r\n\r\n  return (\r\n    <div className=\"background-overlay\" style={{ display: display }}>\r\n      <div className=\"loading-icon-wrapper\">\r\n        <div className=\"loading-icon loading-icon-animation\"></div>\r\n        {/* <div className=\"loading-icon2 loading-icon-animation-reverse\"></div> */}\r\n        <p>Loading</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoadingScreen;\r\n","import React from \"react\";\r\nimport \"./DateSelectMenu.css\";\r\nfunction DateSelectMenu(props) {\r\n  const { dateSelection } = props;\r\n\r\n  const values = [10, 20, 30, 60];\r\n\r\n  function handleChange(event) {\r\n    dateSelection(event.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"date-selector-menu\">\r\n      <label htmlFor=\"date-selector\">Posts from last</label>\r\n      <select name=\"date-selector\" id=\"date-selector\" onChange={handleChange}>\r\n        <option value={values[0]}>10 days</option>\r\n        <option value={values[1]}>20 days</option>\r\n        <option value={values[2]}>30 days</option>\r\n        <option value={values[3]}>2 months</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\nexport default DateSelectMenu;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\nimport DateSelectMenu from \"./DateSelectMenu\";\r\nfunction NavBar(props) {\r\n  const { dateSelection } = props;\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div>\r\n        <span className=\"navbar-brand h1\" href=\"#\">\r\n          Spacestagram\r\n        </span>\r\n        <p>Brought to you by NASA's APOD Api</p>\r\n      </div>\r\n      <DateSelectMenu dateSelection={dateSelection} />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Card from \"./components/Card\";\r\nimport LoadingScreen from \"./components/LoadingScreen\";\r\nimport NavBar from \"./components/NavBar\";\r\n\r\nfunction App() {\r\n  let imageCards;\r\n  let loadingScreenDisplay;\r\n\r\n  let todayDate = new Date().toISOString().slice(0, 10);\r\n  let startingDate = new Date();\r\n  startingDate.setDate(startingDate.getDate() - 10);\r\n  startingDate = startingDate.toISOString().slice(0, 10);\r\n\r\n  //hooks\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [jsonData, setJsonData] = useState(null);\r\n\r\n  let apiKey = \"vn0fMtp6NRQpMEMQlXgvuFttofKGuxcMKFG0cixN\";\r\n  let apiUrl;\r\n\r\n  useEffect(() => {\r\n    fetchApi(startingDate);\r\n  }, []);\r\n\r\n  function fetchApi(this_startDate) {\r\n    apiUrl = `https://api.nasa.gov/planetary/apod?api_key=${apiKey}&start_date=${this_startDate}&end_date=${todayDate}`;\r\n    fetch(apiUrl)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"no reposnse\");\r\n        }\r\n\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        setJsonData(data.reverse());\r\n        setIsLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"problem fetching data\");\r\n      });\r\n  }\r\n\r\n  function createCards(arrayToLoop) {\r\n    let info = [];\r\n\r\n    for (let item of arrayToLoop) {\r\n      info.push(\r\n        <div key={item.title} className=\"row justify-content-center mt-4\">\r\n          <div className=\"col-lg-4 col-md-8 col-sm-auto\">\r\n            <Card\r\n              title={item.title}\r\n              mediaType={item.media_type}\r\n              imageUrl={item.url}\r\n              date={item.date}\r\n              description={item.explanation}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return info;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {*} dateValue the number of days to go back from the current date\r\n   */\r\n  function dateSelection(dateValue) {\r\n    let newStartDate = new Date();\r\n    newStartDate.setDate(new Date().getDate() - dateValue);\r\n    newStartDate = newStartDate.toISOString().slice(0, 10);\r\n\r\n    setIsLoading(true);\r\n    fetchApi(newStartDate);\r\n  }\r\n  if (!isLoading) {\r\n    loadingScreenDisplay = \"none\";\r\n    imageCards = createCards(jsonData);\r\n  } else {\r\n    loadingScreenDisplay = \"block\";\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <NavBar dateSelection={dateSelection} />\r\n      <LoadingScreen display={loadingScreenDisplay} />\r\n      <div className=\"container \">{imageCards}</div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}